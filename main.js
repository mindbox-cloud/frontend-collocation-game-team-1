class d{constructor(t,i,e=50){this._color="white",this._x=t,this._y=i,this._size=e}get color(){return this._color}set color(t){this._color=t}get x(){return this._x}set x(t){this._x=t}get y(){return this._y}set y(t){this._y=t}get size(){return this._size}set size(t){this._size=t}draw(t){t.fillStyle=this._color,t.fillRect(this._x,this._y,this._size,this._size),t.strokeStyle="rgba(0, 0, 0, 0.3)",t.strokeRect(this._x,this._y,this._size,this._size),t.font="bold 10px Arial",t.fillStyle="rgba(0, 0, 0, 0.9)",t.fillText(`${this._x},${this._y}`,this._x+2,this._y+16)}}class c extends d{constructor(t,i,e){super(t,i,e)}draw(t){t.beginPath(),t.fillStyle="green",t.arc(this.x+this.size/4,this.y+this.size/4,this.size/4,0,Math.PI*2),t.fill()}}class _{constructor(t){this._board=[],this._rows=100,this._cols=100,this._cellSize=50,this.goods=[],this.queensCount=t.queensCount,this.createAntWithFoodProbability=t.createAntWithFoodProbability,this.createAntWithoutFoodProbability=t.createAntWithoutFoodProbability,this.goodsCount=t.goodsCount,this.queenDeathSteps=t.queenDeathSteps,this.antDeathSteps=t.antDeathSteps,this._canvas=t.canvas,this._ctx=this._canvas.getContext("2d")}init({size:t}){this._updateBoardSize(t),this._canvas.width=this._rows*this._cellSize,this._canvas.height=this._cols*this._cellSize,this._fillBoard(),this._drawBoard(),this.createInitialCells()}get board(){return this._board}createInitialCells(){const t=[];for(let i=0;i<this.goodsCount;i++){let e,s;do e=Math.floor(Math.random()*this._rows),s=Math.floor(Math.random()*this._cols);while(t.find(n=>n.x===e*this._cellSize&&n.y===s*this._cellSize));t.push(this._board[e][s])}t.forEach(i=>{const e=new c(i.x,i.y,this._cellSize),s=this._board.findIndex(o=>o.includes(i)),n=this._board[s].findIndex(o=>o===i);this._board[s][n]=e})}_updateBoardSize(t){this._rows=t.n,this._cols=t.m}_fillBoard(){for(let t=0;t<this._rows;t++){this._board[t]=[];for(let i=0;i<this._cols;i++)this._board[t][i]=new d(t*this._cellSize,i*this._cellSize,this._cellSize)}}_drawBoard(){this._ctx.beginPath();for(let t=0;t<this._board.length;t++)for(let i=0;i<this._board[t].length;i++)this._board[t][i].draw(this._ctx)}}const u=({initial:h,onChange:t})=>{let i=h.n,e=h.m;const s=document.createElement("div"),n=document.createElement("input");n.type="number",n.value=i.toString(),n.addEventListener("change",()=>{i=parseInt(n.value)}),s.appendChild(n);const o=document.createElement("input");o.type="number",o.value=e.toString(),o.addEventListener("change",()=>{e=parseInt(o.value)}),s.appendChild(o);const r=document.createElement("button");return r.textContent="Apply size",s.appendChild(r),r.addEventListener("click",()=>{t({n:i,m:e})}),s},a={n:10,m:10};class g{constructor(t){this.isRunning=!1,this.tickInterval=1e3,this.intervalId=null,this.gameSettings={queensCount:5,createAntWithFoodProbability:.5,createAntWithoutFoodProbability:.5,goodsCount:5,queenDeathSteps:3,antDeathSteps:3},this.container=t;const i=document.createElement("canvas");this.container.appendChild(i),this.board=new _({canvas:i,...this.gameSettings})}start(){if(this.isRunning)return;this.board.init({size:a});const t=u({initial:a,onChange:i=>this.board.init({size:i})});this.container.prepend(t),this.isRunning=!0,this.intervalId=setInterval(()=>{this.tick()},this.tickInterval)}stop(){this.isRunning&&(this.isRunning=!1,this.intervalId!==null&&(clearInterval(this.intervalId),this.intervalId=null))}tick(){this.board._drawBoard()}setTickInterval(t){this.tickInterval=t,this.isRunning&&(this.stop(),this.start())}get running(){return this.isRunning}}const l=document.getElementById("app");l&&new g(l).start();
