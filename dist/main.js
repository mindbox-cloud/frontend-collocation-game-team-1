class d{constructor(t,e,i=20){this._color="white",this._x=t,this._y=e,this._size=i}get color(){return this._color}set color(t){this._color=t}get x(){return this._x}set x(t){this._x=t}get y(){return this._y}set y(t){this._y=t}get size(){return this._size}set size(t){this._size=t}draw(t){t.fillStyle=this._color,t.fillRect(this._x,this._y,this._size,this._size),t.strokeStyle="rgba(0, 0, 0, 0.3)",t.strokeRect(this._x,this._y,this._size,this._size),t.font="bold 10px Arial",t.fillStyle="rgba(0, 0, 0, 0.9)",t.fillText(`${this._x},${this._y}`,this._x+2,this._y+16)}}class c{constructor(t){this._board=[],this._rows=100,this._cols=100,this._cellSize=20,this._canvas=t,this._ctx=t.getContext("2d")}init({size:t}){this._updateBoardSize(t),this._canvas.width=this._rows*this._cellSize,this._canvas.height=this._cols*this._cellSize,this._fillBoard(),this._drawBoard()}get board(){return this._board}_updateBoardSize(t){this._rows=t.n,this._cols=t.m}_fillBoard(){for(let t=0;t<this._rows;t++){this._board[t]=[];for(let e=0;e<this._cols;e++)this._board[t][e]=new d(t*this._cellSize,e*this._cellSize,this._cellSize)}}_drawBoard(){this._ctx.beginPath();for(let t=0;t<this._board.length;t++)for(let e=0;e<this._board[t].length;e++)this._board[t][e].draw(this._ctx)}}const _=({initial:r,onChange:t})=>{let e=r.n,i=r.m;const s=document.createElement("div"),n=document.createElement("input");n.type="number",n.value=e.toString(),n.addEventListener("change",()=>{e=parseInt(n.value)}),s.appendChild(n);const l=document.createElement("input");l.type="number",l.value=i.toString(),l.addEventListener("change",()=>{i=parseInt(l.value)}),s.appendChild(l);const h=document.createElement("button");return h.textContent="Apply size",s.appendChild(h),h.addEventListener("click",()=>{t({n:e,m:i})}),s},a={n:10,m:10};class u{constructor(t){this.isRunning=!1,this.tickInterval=1e3,this.intervalId=null,this.container=t;const e=document.createElement("canvas");t.appendChild(e),this.board=new c(e)}start(){if(this.isRunning)return;this.board.init({size:a});const t=_({initial:a,onChange:e=>this.board.init({size:e})});this.container.appendChild(t),this.isRunning=!0,this.intervalId=setInterval(()=>{this.tick()},this.tickInterval)}stop(){this.isRunning&&(this.isRunning=!1,this.intervalId!==null&&(clearInterval(this.intervalId),this.intervalId=null))}tick(){this.updateCells(),this.board._drawBoard()}updateCells(){const t=this.board.board,e=["red","green","blue","yellow","white"];for(let i=0;i<t.length;i++)for(let s=0;s<t[i].length;s++)if(Math.random()<.1){const n=e[Math.floor(Math.random()*e.length)];t[i][s].color=n}}setTickInterval(t){this.tickInterval=t,this.isRunning&&(this.stop(),this.start())}get running(){return this.isRunning}}const o=document.getElementById("app");o&&new u(o).start();
